class ModelHeterogene(torch.nn.Module):
    def __init__(self, input_dim, hidden_dim=128, ngcn=2, nmlp=1, nmlp_value=1, res=False, withbn=False):
        super(ModelHeterogene, self).__init__()
        self.ngcn = ngcn
        self.nmlp = nmlp
        self.withbn = withbn
        self.res = res
        self.listgcn = nn.ModuleList()
        self.listmlp = nn.ModuleList()
        self.listmlp_pass = nn.ModuleList()
        self.listmlp_value = nn.ModuleList()
        self.listgcn.append(BaseConvHeterogene(input_dim, hidden_dim, 'gcn', withbn=withbn))
        for _ in range(ngcn-1):
            self.listgcn.append(BaseConvHeterogene(hidden_dim, hidden_dim, 'gcn', res=res, withbn=withbn))
        for _ in range(nmlp-1):
            self.listmlp.append(BaseConvHeterogene(hidden_dim, hidden_dim, 'mlp', res=res, withbn=withbn))
        self.listmlp.append(Linear(hidden_dim, 1))
        for _ in range(nmlp_value-1):
            self.listmlp_value.append(BaseConvHeterogene(hidden_dim, hidden_dim, 'mlp', res=res, withbn=withbn))
        self.listmlp_value.append(Linear(hidden_dim, 1))

        self.listmlp_pass.append(BaseConvHeterogene(hidden_dim+3, hidden_dim, 'mlp', withbn=withbn))
        for _ in range(nmlp-2):
            self.listmlp_pass.append(BaseConvHeterogene(hidden_dim, hidden_dim, 'mlp', res=res, withbn=withbn))
        self.listmlp_pass.append(Linear(hidden_dim, 1))


    def forward(self, dico):
        data, num_node, ready = dico['graph'], dico['node_num'], dico['ready']
        x, edges = data.x, data.edge_index
        features_cluster = x[0, -3:]

        for layer in self.listgcn:
            x = layer(x, edges)

        v = torch.mean(x, dim=0)
        x_pass = torch.max(x[ready.squeeze(1).to(torch.bool)], dim=0)[0]
        x_pass = torch.cat((x_pass, features_cluster), dim=0)

        for layer in self.listmlp_value:
            v = layer(v)

        for layer in self.listmlp:
            x = layer(x)

        for layer in self.listmlp_pass:
            x_pass = layer(x_pass)

        probs = torch.cat((x[ready.squeeze(1).to(torch.bool)].squeeze(-1), x_pass), dim=0)
        probs = F.softmax(probs)

        return probs, v